N-Queen problem in Java

import java.io.*;
import java.util.*;
public class NQueens{

    public static boolean isSafe(char board[][],int row,int col){ //to find safe place to place queen
        //vertically up(row-- & col same)
        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        // diagonally left up(row-- & col--)
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }   
        }
        //diagonally right up(row-- & col++)
        for(int i=row-1,j=col+1; i>=0 && j<board.length; i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }

    public static void nQueens(char board[][],int row){
        //base case
        if(row==board.length){
            Printboard(board);  //print board
            count++;            //count ways (Possible solutions)
            return;
        }

        //recursion
        for(int j=0;j<board.length;j++){
            if(isSafe(board,row,j)){
                board[row][j]='Q';
                nQueens(board,row+1);   //function call
                board[row][j]='x';      //backtracking step
            }    
        }
    }

    public static void Printboard(char board[][]){
        System.out.println("----------------------------------");
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }
    static int count=0;
    public static void main(String args[]){
        Scanner sc= new Scanner(System.in);
        int n;
        System.out.print("Enter no. of queens: ");
        n=sc.nextInt();
        char board[][]= new char[n][n];
        //Initialize
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x';
            }
        }
        nQueens(board, 0);
        //No. of ways in which we can solve N queens problem
        System.out.println("No. of ways to solve N queens problem: "+ count); 
    }
}